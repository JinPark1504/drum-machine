{"version":3,"sources":["Pads.js","DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["Pads","letter","sound","source","DrumPad","props","react_default","a","createElement","id","pad","className","onClick","drumClick","key","src","type","volume","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","display","handleClick","bind","assertThisInitialized","onKeyDown","handleChange","setState","e","target","value","document","getElementById","console","log","setAttribute","setTimeout","vid","currentTime","play","addEventListener","removeEventListener","toUpperCase","filter","p","length","parentElement","Math","round","_this2","min","max","onChange","step","map","index","src_DrumPad","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.801abaeb.chunk.js","sourcesContent":["const Pads = [\r\n  {\r\n    letter: \"Q\",\r\n    sound: \"Heater-1\",\r\n    source: \"Heater-1\"\r\n  },{\r\n    letter: \"W\",\r\n    sound: \"Heater-2\",\r\n    source: \"Heater-2\"\r\n  },{\r\n    letter: \"E\",\r\n    sound: \"Heater-3\",\r\n    source: \"Heater-3\"\r\n  },{\r\n    letter: \"A\",\r\n    sound: \"Heater-4\",\r\n    source: \"Heater-4_1\"\r\n  },{\r\n    letter: \"S\",\r\n    sound: \"Clap\",\r\n    source: \"Heater-6\"\r\n  },{\r\n    letter: \"D\",\r\n    sound: \"Open-HH\",\r\n    source: \"Dsc_Oh\"\r\n  },{\r\n    letter: \"Z\",\r\n    sound: \"Kick-n'-Hat\",\r\n    source: \"Kick_n_Hat\"\r\n  },{\r\n    letter: \"X\",\r\n    sound: \"Kick\",\r\n    source: \"RP4_KICK_1\"\r\n  },{\r\n    letter: \"C\",\r\n    sound: \"Closed-HH\",\r\n    source: \"Cev_H2\"\r\n  }\r\n];\r\n\r\nexport default Pads","import React from 'react';\r\n\r\nconst DrumPad = props => {\r\n  return (\r\n    <div id={props.pad.sound} className=\"drum-pad\" onClick={() => {props.drumClick(props.pad.sound, props.pad.letter)}} key={props.key}>\r\n      {props.pad.letter}\r\n      <audio src={\"https://s3.amazonaws.com/freecodecamp/drums/\" + props.pad.source + \".mp3\"} type=\"audio/mpeg\" className=\"clip\" id={props.pad.letter} volume={props.volume}></audio>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DrumPad","import React from 'react';\nimport './App.css';\nimport Pads from './Pads';\nimport DrumPad from './DrumPad';\n\nconst preStyle = \"background-color: hsl(150, 100%, 25%);font-weight: bold;font-size: 2rem;color: hsl(150, 100%, 97%);box-shadow: 4px 4px 3px hsl(150, 100%, 10%);border-radius: 5px;\";\nconst clickedStyle = \"cursor: pointer;background-color: hsl(150, 100%, 40%);font-size: 3rem;\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: 'Display',\n      id: '',\n      volume: 0.4\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleClick(display, id) {\n    this.setState({\n      display,\n      id\n    });\n  }\n\n  handleChange(e) {\n    this.setState({\n      volume: e.target.value\n    });\n  }\n\n  componentDidUpdate() {\n    if (document.getElementById(this.state.id) !== null) {\n      console.log(document.getElementById(this.state.id));\n      let pad = document.getElementById(this.state.display);\n      pad.setAttribute('style', clickedStyle);\n      setTimeout( () => {\n        pad.setAttribute('style', preStyle);\n      }, 200);\n      let vid = document.getElementById(this.state.id);\n      vid.currentTime = 0;\n      vid.volume = this.state.volume;\n      vid.play();\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyDown);\n  }\n\n  onKeyDown(e) {\n    console.log(e, this.state.volume);\n    let key = e.key.toUpperCase();\n    // console.log(pads.filter(p => p.letter === key).length > 0);\n    if (Pads.filter( p => p.letter === key).length > 0) {\n      let display = document.getElementById(key).parentElement.id;\n      this.setState({\n        display,\n        id: key\n      });\n    } else if (key === 'ARROWRIGHT' && this.state.volume < 1) {\n      console.log('arrow key entered: ' + key);\n      this.setState({\n        volume: Math.round((this.state.volume + 0.2) * 10) / 10\n      });\n    } else if (key === 'ARROWLEFT' && this.state.volume > 0.1) {\n      this.setState({\n        volume: Math.round((this.state.volume - 0.2) * 10) / 10\n      });\n    }\n  }\n  render() {\n    return (\n      <div id=\"container\">\n        <header>\n          <h1>Drum Machine (using keypad)</h1>\n        </header>\n        <div id=\"drum-machine\">\n          <div className=\"drum-display\">\n            <div id=\"display\">\n              <p>{this.state.display}</p>\n            </div>\n            <div id=\"volume\">\n              <p id=\"volume-label\">Volume:</p>\n              <span id=\"volume-value\">{this.state.volume * 10}</span>\n              <input id=\"slider\" type=\"range\" min=\"0\" max=\"1\" value={this.state.volume} onChange={this.handleChange} step=\"0.2\" />\n            </div>\n          </div>\n          <div className=\"drum-pads\">\n            {Pads.map( (pad, index) => \n              <DrumPad pad={pad} drumClick={this.handleClick} key={index} volume={this.state.volume}/>\n            )}\n          </div>\n        </div>\n        <footer>\n          <p>Designed and Coded by <b>Jin Park</b></p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}